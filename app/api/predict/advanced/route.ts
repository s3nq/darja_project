import { pool } from '@/lib/database'
import { NextRequest, NextResponse } from 'next/server'

// –ì–ª—É–±–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
export async function GET(req: NextRequest) {
	try {
		//  –ü–æ–ª—É—á–∞–µ–º —Ä–∞–π–æ–Ω—ã
		const districtsRes = await pool.query(
			`SELECT DISTINCT district FROM properties`
		)
		const districts = districtsRes.rows.map(r => r.district)

		const results: any[] = []

		for (const district of districts) {
			//  –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω –ø–æ –º–µ—Å—è—Ü–∞–º
			const historyRes = await pool.query(
				`
				SELECT 
					TO_CHAR(created_at, 'YYYY-MM') AS month,
					ROUND(AVG(price / NULLIF(area, 0))) AS avg_price
				FROM properties
				WHERE district = $1
				GROUP BY month
				ORDER BY month ASC
				LIMIT 12
			`,
				[district]
			)

			const hist = historyRes.rows
			if (hist.length < 3) continue // –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å–∫–∏–ø–∞–µ–º

			const prices = hist.map(h => Number(h.avg_price)).filter(Boolean)
			const lnPrices = prices.map(p => Math.log(p))
			const t = Array.from({ length: lnPrices.length }, (_, i) => i + 1)

			//  –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (–Ω–∞—Ö–æ–¥–∏–º Œ± –∏ Œ≤)
			const n = lnPrices.length
			const sumT = t.reduce((a, b) => a + b, 0)
			const sumLnP = lnPrices.reduce((a, b) => a + b, 0)
			const sumT2 = t.reduce((a, b) => a + b * b, 0)
			const sumTLnP = t.reduce((sum, ti, i) => sum + ti * lnPrices[i], 0)

			const beta = (n * sumTLnP - sumT * sumLnP) / (n * sumT2 - sumT * sumT)
			const alpha = (sumLnP - beta * sumT) / n

			//  –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
			const tNext = n + 1
			const predicted_ln_price = alpha + beta * tNext
			const predicted_price = Math.exp(predicted_ln_price)

			//  –û—Ü–µ–Ω–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
			const residuals = lnPrices.map((lnP, i) => lnP - (alpha + beta * t[i]))
			const variance = residuals.reduce((sum, r) => sum + r * r, 0) / (n - 2)
			const std_error = Math.sqrt(variance)

			// –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è 68% (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 95% ‚Üí * 1.96)
			const epsilon = Math.exp(predicted_ln_price + std_error) - predicted_price

			// üîπ –°—Ä–µ–¥–Ω—è—è —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–ø–æ –≤—Å–µ–π –≤—ã–±–æ—Ä–∫–µ)
			const currentRes = await pool.query(
				`
				SELECT ROUND(AVG(price / NULLIF(area, 0))) AS current_price
				FROM properties
				WHERE district = $1 AND area > 0 AND price > 0
			`,
				[district]
			)

			const current_price = Number(currentRes.rows[0]?.current_price ?? 0)

			//  –ò–Ω–¥–µ–∫—Å –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ (–Ω–∏–∑–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è = –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
			const uncertainty_index = 1 - Math.min(std_error, 1) // —á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ

			const diff = ((predicted_price - current_price) / current_price) * 100

			results.push({
				district,
				current_price: Math.round(current_price),
				predicted_price: Math.round(predicted_price),
				confidence_interval: `¬±${Math.round(epsilon)} ‚ÇΩ`,
				diff: Number(diff.toFixed(2)),
				reliability: Math.round(uncertainty_index * 100) + '%',
			})
		}

		//  –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
		const { searchParams } = new URL(req.url)
		const sort = searchParams.get('sort') === 'desc' ? 'desc' : 'asc'
		const districtFilter = searchParams.get('district')

		const filtered = districtFilter
			? results.filter(p => p.district === districtFilter)
			: results

		const sorted = filtered.sort((a, b) =>
			sort === 'asc' ? a.diff - b.diff : b.diff - a.diff
		)

		return NextResponse.json(sorted)
	} catch (err) {
		console.error('[predict/advanced] error:', err)
		return NextResponse.json(
			{ error: 'Failed to fetch prediction' },
			{ status: 500 }
		)
	}
}
